// <auto-generated />
using System;
using HR_Project.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HR_Project.Infrastructure.Migrations
{
    [DbContext(typeof(HR_Context))]
    [Migration("20231102103236_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(7530));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Neighbourhood")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            City = "Istanbul",
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(7304),
                            Detail = "Bilge Adam Akademi Kadikoy Subesi",
                            District = "Kadikoy",
                            IsActive = false,
                            Neighbourhood = "Caferaga Mah.",
                            Street = "Muhurdar"
                        },
                        new
                        {
                            ID = 2,
                            City = "Istanbul",
                            CompanyID = 1,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(7306),
                            Detail = "Menekşe Sk No:1",
                            District = "Kartal",
                            IsActive = false,
                            Neighbourhood = "ÇAvuşoğlu Mah.",
                            Street = "Muhurdar"
                        });
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Advance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int>("AdvanceTypeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 459, DateTimeKind.Local).AddTicks(1491));

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonnelID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AdvanceTypeID");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("PersonnelID");

                    b.ToTable("Advances");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.AdvanceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 459, DateTimeKind.Local).AddTicks(2399));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("AdvanceTypes");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 445, DateTimeKind.Local).AddTicks(9996));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4b1fb776-f3d7-47e9-81f0-f0896c651685",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "9011e966-1da6-4769-a07c-8acc0d871c42",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "01343821-fcc0-42f2-ba31-1c5be0f4d72e",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = false,
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("CompanyTitle")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ContactEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ContactStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 459, DateTimeKind.Local).AddTicks(920));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MersisNo")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("NumberOfEmployees")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("TaxAdministration")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<DateTime>("YearOfEstablishment")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CompanyName = "Bilge Adam",
                            CompanyTitle = 1,
                            ContactStartDate = new DateTime(2023, 11, 2, 13, 32, 36, 459, DateTimeKind.Local).AddTicks(822),
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "bilgeadam@bilgeadam.com",
                            IsActive = false,
                            LogoPath = "icardi.jpg",
                            MersisNo = "123456789123456",
                            NumberOfEmployees = 100,
                            PhoneNumber = "1234567890",
                            TaxAdministration = "Kadıköy",
                            TaxNumber = "1234567890",
                            YearOfEstablishment = new DateTime(2023, 11, 2, 13, 32, 36, 459, DateTimeKind.Local).AddTicks(820)
                        });
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(8928));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Code");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Code = "TL",
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(8694),
                            ExchangeRate = 1m,
                            IsActive = true,
                            Name = "Turkish Lira"
                        },
                        new
                        {
                            Code = "USD",
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(8696),
                            ExchangeRate = 27m,
                            IsActive = true,
                            Name = "US Dollar"
                        },
                        new
                        {
                            Code = "EUR",
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(8698),
                            ExchangeRate = 30m,
                            IsActive = true,
                            Name = "EURO"
                        },
                        new
                        {
                            Code = "JPY",
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(8700),
                            ExchangeRate = 18m,
                            IsActive = true,
                            Name = "Japanese Yen"
                        });
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Expense", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(6204));

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(75)
                        .HasColumnType("varchar(75)");

                    b.Property<int>("ExpenseTypeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PersonnelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.HasIndex("CurrencyCode");

                    b.HasIndex("ExpenseTypeID");

                    b.HasIndex("PersonnelID");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Amount = 1000m,
                            ApprovalStatus = "Pending",
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(6041),
                            CurrencyCode = "TL",
                            DocumentPath = "deneme.jpg",
                            ExpenseTypeID = 1,
                            IsActive = true,
                            PersonnelID = 1,
                            ReplyDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(6040),
                            RequestDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(6040)
                        });
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.ExpenseType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(7653));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("decimal");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("ID");

                    b.ToTable("ExpenseTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(7446),
                            IsActive = true,
                            MaxAmount = 5000m,
                            MinAmount = 1000m,
                            Name = "Travel"
                        },
                        new
                        {
                            ID = 2,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(7448),
                            IsActive = true,
                            MaxAmount = 3000m,
                            MinAmount = 1000m,
                            Name = " Accommodation"
                        },
                        new
                        {
                            ID = 3,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(7449),
                            IsActive = true,
                            MaxAmount = 500m,
                            MinAmount = 300m,
                            Name = "Meals"
                        },
                        new
                        {
                            ID = 4,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(7451),
                            IsActive = true,
                            MaxAmount = 5000m,
                            MinAmount = 1000m,
                            Name = "Education"
                        },
                        new
                        {
                            ID = 5,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(7452),
                            IsActive = true,
                            MaxAmount = 3000m,
                            MinAmount = 1000m,
                            Name = "Fuel"
                        },
                        new
                        {
                            ID = 6,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(7453),
                            IsActive = true,
                            MaxAmount = 5000m,
                            MinAmount = 1000m,
                            Name = "Entertainment"
                        });
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<int?>("ApprovalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(2196));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("NumberOfDays")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PermissionTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PersonnelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReplyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("PermissionTypeID");

                    b.HasIndex("PersonnelID");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ApprovalStatus = 1,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(2039),
                            ExpirationDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(2042),
                            IsActive = true,
                            NumberOfDays = 1m,
                            PermissionTypeID = 1,
                            PersonnelID = 1,
                            RequestDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(2043),
                            StartDate = new DateTime(2023, 11, 2, 13, 32, 36, 458, DateTimeKind.Local).AddTicks(2041)
                        });
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.PermissionType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(9319));

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("PermissionTypes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8705),
                            IsActive = false,
                            IsPaid = false,
                            Name = "Doğum İzni"
                        },
                        new
                        {
                            ID = 2,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8709),
                            IsActive = false,
                            IsPaid = false,
                            MaxDays = 5,
                            Name = "Babalık İzni"
                        },
                        new
                        {
                            ID = 3,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8709),
                            IsActive = false,
                            IsPaid = false,
                            MaxDays = 10,
                            Name = "Hastalık İzni"
                        },
                        new
                        {
                            ID = 4,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8710),
                            IsActive = false,
                            IsPaid = false,
                            MaxDays = 3,
                            Name = "Ölüm İzni"
                        },
                        new
                        {
                            ID = 5,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8711),
                            IsActive = false,
                            IsPaid = false,
                            Name = "Evlilik İzni"
                        },
                        new
                        {
                            ID = 6,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8711),
                            IsActive = false,
                            IsPaid = false,
                            MaxDays = 40,
                            Name = "Evlat edinme İzni"
                        },
                        new
                        {
                            ID = 7,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8712),
                            IsActive = false,
                            IsPaid = false,
                            Name = "Refakat İzni"
                        },
                        new
                        {
                            ID = 8,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8712),
                            IsActive = false,
                            IsPaid = false,
                            Name = "Ücretsiz İzni"
                        },
                        new
                        {
                            ID = 9,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8713),
                            IsActive = false,
                            IsPaid = false,
                            Name = "Yeni iş arama İzni"
                        },
                        new
                        {
                            ID = 10,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8713),
                            IsActive = false,
                            IsPaid = false,
                            Name = "Gebelik Kontrol İzni"
                        },
                        new
                        {
                            ID = 11,
                            CreateDate = new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(8713),
                            IsActive = false,
                            IsPaid = false,
                            Name = "Süt İzni"
                        });
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Personnel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("AddressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<string>("BirthPlace")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("CompanyID")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2023, 11, 2, 13, 32, 36, 457, DateTimeKind.Local).AddTicks(4650));

                    b.Property<DateTime>("DateOfStartWorking")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfStopWorking")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Photo")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<decimal>("Salary")
                        .HasMaxLength(20)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SecondSurname")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TC")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressID");

                    b.HasIndex("CompanyID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            AddressID = 1,
                            BirthDate = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Istanbul",
                            CompanyName = "Bilge Adam",
                            ConcurrencyStamp = "5d7a211b-245b-4bd4-933e-9dc3e1a1b98a",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfStartWorking = new DateTime(2023, 11, 2, 13, 32, 36, 446, DateTimeKind.Local).AddTicks(4003),
                            Department = "Software Development",
                            Email = "admin@bilgeadam.com",
                            EmailConfirmed = false,
                            IsActive = false,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMİN@BİLGEADAM.COM",
                            NormalizedUserName = "ADMİN@BİLGEADAM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDC14fZ8TPyuLjGCK52gxQ/doqZVypuB8RlUkPoMyQ5TjtPgkINMtTO6VGeVSS0ECw==",
                            Phone = "05555555555",
                            PhoneNumberConfirmed = false,
                            Photo = "icardi.jpg",
                            Salary = 35500m,
                            SecurityStamp = "8f5f55b8-04ff-4d76-aabf-f71feeadc28a",
                            Surname = "Admin",
                            TC = "11111111111",
                            Title = "Software Developer",
                            TwoFactorEnabled = false,
                            UserName = "admin@bilgeadam.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            AddressID = 1,
                            BirthDate = new DateTime(2001, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BirthPlace = "Istanbul",
                            CompanyName = "Bilge Adam",
                            ConcurrencyStamp = "f6ebc594-f39b-4e39-b37b-b5ddeef90c06",
                            CreateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfStartWorking = new DateTime(2023, 11, 2, 13, 32, 36, 451, DateTimeKind.Local).AddTicks(8929),
                            Department = "Software Development",
                            Email = "root@bilgeadamboost.com",
                            EmailConfirmed = false,
                            IsActive = false,
                            LockoutEnabled = false,
                            Name = "Root",
                            NormalizedEmail = "ROOT@BİLGEADAMBOOST.COM",
                            NormalizedUserName = "ROOT@BİLGEADAMBOOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMXr9GqQybjvQns8qBTI0WsuhUw2opim370nBSS27CJ6S5/OHqmiFOl4nYapMC2Z0w==",
                            Phone = "05555555555",
                            PhoneNumberConfirmed = false,
                            Photo = "icardi.jpg",
                            Salary = 27500m,
                            SecurityStamp = "23917233-2f01-42bc-9d04-8c8649dde879",
                            Surname = "Root",
                            TC = "22222222222",
                            Title = "Software Developer",
                            TwoFactorEnabled = false,
                            UserName = "root@bilgeadamboost.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Address", b =>
                {
                    b.HasOne("HR_Project.Domain.Entities.Concrete.Company", "Company")
                        .WithMany("Addresses")
                        .HasForeignKey("CompanyID");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Advance", b =>
                {
                    b.HasOne("HR_Project.Domain.Entities.Concrete.AdvanceType", "AdvanceType")
                        .WithMany("Advances")
                        .HasForeignKey("AdvanceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_Project.Domain.Entities.Concrete.Currency", "Currency")
                        .WithMany("Advances")
                        .HasForeignKey("CurrencyCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_Project.Domain.Entities.Concrete.Personnel", "Personnel")
                        .WithMany()
                        .HasForeignKey("PersonnelID");

                    b.Navigation("AdvanceType");

                    b.Navigation("Currency");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Expense", b =>
                {
                    b.HasOne("HR_Project.Domain.Entities.Concrete.Currency", "Currency")
                        .WithMany("Expenses")
                        .HasForeignKey("CurrencyCode");

                    b.HasOne("HR_Project.Domain.Entities.Concrete.ExpenseType", "ExpenseType")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_Project.Domain.Entities.Concrete.Personnel", "Personnel")
                        .WithMany("Expenses")
                        .HasForeignKey("PersonnelID");

                    b.Navigation("Currency");

                    b.Navigation("ExpenseType");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Permission", b =>
                {
                    b.HasOne("HR_Project.Domain.Entities.Concrete.PermissionType", "PermissionType")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_Project.Domain.Entities.Concrete.Personnel", "Personnel")
                        .WithMany("Permissions")
                        .HasForeignKey("PersonnelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionType");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Personnel", b =>
                {
                    b.HasOne("HR_Project.Domain.Entities.Concrete.Address", "Address")
                        .WithMany("Personnels")
                        .HasForeignKey("AddressID");

                    b.HasOne("HR_Project.Domain.Entities.Concrete.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID");

                    b.Navigation("Address");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("HR_Project.Domain.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("HR_Project.Domain.Entities.Concrete.Personnel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("HR_Project.Domain.Entities.Concrete.Personnel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("HR_Project.Domain.Entities.Concrete.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HR_Project.Domain.Entities.Concrete.Personnel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("HR_Project.Domain.Entities.Concrete.Personnel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Address", b =>
                {
                    b.Navigation("Personnels");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.AdvanceType", b =>
                {
                    b.Navigation("Advances");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Company", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Currency", b =>
                {
                    b.Navigation("Advances");

                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.ExpenseType", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.PermissionType", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("HR_Project.Domain.Entities.Concrete.Personnel", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
